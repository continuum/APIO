{
  "host": "petstore.swagger.io",
  "info": {
    "title": "Swagger Petstore",
    "contact": {
      "name": "apiteam@swagger.io"
    },
    "license": {
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      "name": "Apache 2.0"
    },
    "version": "1.0.0",
    "description": "This is a sample server Petstore server.\n\n[Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.\n\nFor this sample, you can use the api key `special-key` to test the authorization filters\n",
    "termsOfService": "http://helloreverb.com/terms/"
  },
  "paths": {
    "/pets": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "photoUrls"
              ],
              "properties": {
                "id": {
                  "type": "number",
                  "maximum": 7,
                  "minimum": 2,
                  "exclusiveMaximum": true,
                  "exclusiveMinimum": true
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store"
                },
                "category": {
                  "$ref": "#/definitions/Category"
                },
                "photoUrls": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": false,
            "description": "Pet object that needs to be added to the store"
          }
        ],
        "description": "",
        "operationId": "updatePet"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "https://raw.githubusercontent.com/e-gob/interoperabilidad/11cd7b4bf0582c398e9c68eb6ceb9f2505cbeb30/test/files/sample-schemas/ComplexSchema.json"
            },
            "required": false,
            "description": "Pet object that needs to be added to the store"
          }
        ],
        "description": "",
        "operationId": "addPet"
      }
    },
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": false,
            "description": "Created user object"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser"
      }
    },
    "/users/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "string"
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "type": "string",
            "required": false,
            "description": "The user name for login"
          },
          {
            "in": "query",
            "name": "password",
            "type": "string",
            "format": "password",
            "required": false,
            "description": "The password for login in clear text"
          }
        ],
        "description": "",
        "operationId": "loginUser"
      }
    },
    "/pets/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "api_key": [

            ]
          },
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "ID of pet that needs to be fetched"
          }
        ],
        "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "operationId": "getPetById"
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "petId",
            "type": "string",
            "required": true,
            "description": "ID of pet that needs to be updated"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "required": true,
            "description": "Updated name of the pet"
          },
          {
            "in": "formData",
            "name": "status",
            "type": "string",
            "required": true,
            "description": "Updated status of the pet"
          }
        ],
        "description": "",
        "operationId": "updatePetWithForm"
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "api_key",
            "type": "string",
            "required": true,
            "description": ""
          },
          {
            "in": "path",
            "name": "petId",
            "type": "integer",
            "format": "int64",
            "required": true,
            "description": "Pet id to delete"
          }
        ],
        "description": "",
        "operationId": "deletePet"
      }
    },
    "/stores/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Complex"
            },
            "required": false,
            "description": "order placed for purchasing the pet"
          }
        ],
        "description": "",
        "operationId": "placeOrder"
      }
    },
    "/users/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "description": "",
        "operationId": "logoutUser"
      }
    },
    "/pets/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false,
            "description": "Tags to filter by",
            "collectionFormat": "multi"
          }
        ],
        "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags"
      }
    },
    "/users/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "required": true,
            "description": "The name that needs to be fetched. Use user1 for testing."
          }
        ],
        "description": "",
        "operationId": "getUserByName"
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "required": true,
            "description": "name that need to be deleted"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": false,
            "description": "Updated user object"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser"
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string",
            "required": true,
            "description": "The name that needs to be deleted"
          }
        ],
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser"
      }
    },
    "/pets/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "security": [
          {
            "petstore_auth": [
              "write_pets",
              "read_pets"
            ]
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false,
            "description": "Status values that need to be considered for filter",
            "collectionFormat": "multi"
          }
        ],
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "findPetsByStatus"
      }
    },
    "/users/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            "required": false,
            "description": "List of user object"
          }
        ],
        "description": "",
        "operationId": "createUsersWithListInput"
      }
    },
    "/users/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            },
            "required": false,
            "description": "List of user object"
          }
        ],
        "description": "",
        "operationId": "createUsersWithArrayInput"
      }
    }
  },
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "basePath": "/v2",
  "definitions": {
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        },
        "complete": {
          "type": "boolean"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Complex": {
      "type": "object",
      "properties": {
        "hora": {
          "type": "string",
          "pattern": '^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$',
          "description": "la hora"
        },
        "fecha": {
          "type": "string",
          "format": "date-time",
          "description": "la fecha"
        },
        "integro": {
          "type": "integer",
          "title": "integro",
          "default": 5,
          "maximum": 7,
          "minimum": 3,
          "description": "el entero",
          "exclusiveMaximum": true,
          "exclusiveMinimum": true
        },
        "numero2": {
          "type": "number",
          "title": "numero2",
          "minimum": 3,
          "description": "el decimal",
          "exclusiveMinimum": false
        },
        "integro2": {
          "type": "integer",
          "title": "integro",
          "maximum": 7,
          "description": "Descripción descrita",
          "exclusiveMaximum": true
        },
        "estadosMensajes": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "titulo",
              "tipoContenido"
            ],
            "properties": {
              "id": {
                "type": "number",
                "description": "Descripción descrita"
              },
              "tipo": {
                "type": "string",
                "description": "Descripción descrita"
              },
              "titulo": {
                "type": "string",
                "description": "Descripción descrita"
              },
              "contenido": {
                "type": "string",
                "description": "Descripción descrita"
              },
              "tipoContenido": {
                "enum": [
                  "TXT",
                  "HTML",
                  "PDF",
                  "NADA"
                ],
                "type": "string",
                "description": "Descripción descrita"
              },
              "notificacionPorEmail": {
                "type": "boolean",
                "description": "Descripción descrita"
              }
            }
          },
          "minItems": 2,
          "description": "Descripción descrita",
          "uniqueItems": true
        },
        "estadosSiguientes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Descripción descrita"
              },
              "Cosas": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Descripción descrita"
                    }
                  }
                },
                "description": "Descripción descrita"
              },
              "nombre": {
                "type": "string",
                "description": "Descripción descrita"
              }
            }
          },
          "minItems": 1,
          "description": "Descripción descrita"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "in": "header",
      "name": "api_key",
      "type": "apiKey"
    },
    "petstore_auth": {
      "flow": "implicit",
      "type": "oauth2",
      "scopes": {
        "read_pets": "read your pets",
        "write_pets": "modify pets in your account"
      },
      "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog"
    }
  }
}